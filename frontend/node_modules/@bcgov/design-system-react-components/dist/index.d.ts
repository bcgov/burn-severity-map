import * as react_jsx_runtime from 'react/jsx-runtime';
import { DisclosureProps, DisclosureGroupProps, DialogProps as DialogProps$1, ButtonProps as ButtonProps$1, CheckboxProps, CheckboxGroupProps as CheckboxGroupProps$1, ValidationResult, FormProps, HeadingProps as HeadingProps$1, LinkProps as LinkProps$1, ModalOverlayProps, RadioProps, RadioGroupProps as RadioGroupProps$1, SelectProps as SelectProps$1, ListBoxItemProps as ListBoxItemProps$1, Key, TagProps as TagProps$1, TagGroupProps as TagGroupProps$1, TagListProps as TagListProps$1, TextProps as TextProps$1, TextFieldProps as TextFieldProps$1, SwitchProps as SwitchProps$1, TooltipProps } from 'react-aria-components';
export { DialogTrigger, TooltipTrigger } from 'react-aria-components';
import { PropsWithChildren } from 'react';

interface AccordionProps extends DisclosureProps {
    label?: string;
}
declare function Accordion({ label, children, ...props }: AccordionProps): react_jsx_runtime.JSX.Element;

interface AccordionGroupProps extends DisclosureGroupProps {
    title?: string;
    titleElement?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
}
declare function AccordionGroup({ title, titleElement, children, ...props }: AccordionGroupProps): react_jsx_runtime.JSX.Element;

interface AlertBannerProps extends React.PropsWithChildren {
    variant?: "info" | "success" | "warning" | "danger" | "black";
    isIconHidden?: boolean;
    isCloseable?: boolean;
    role?: React.AriaRole | undefined;
    customIcon?: React.ReactNode;
    onClose?: () => void;
}
declare function AlertBanner({ variant, isIconHidden, isCloseable, role, onClose, children, customIcon, ...props }: AlertBannerProps): react_jsx_runtime.JSX.Element;

interface AlertDialogProps extends DialogProps$1 {
    variant?: "info" | "confirmation" | "warning" | "error" | "destructive";
    title?: string;
    isIconHidden?: boolean;
    isCloseable?: boolean;
    buttons?: React.ReactNode;
}
declare function AlertDialog({ children, variant, role, title, isCloseable, isIconHidden, buttons, ...props }: AlertDialogProps): react_jsx_runtime.JSX.Element;

interface ButtonProps extends ButtonProps$1 {
    /**
     * Defaults to `medium`. `small` is shorter vertically.
     */
    size?: "small" | "medium";
    /**
     * Defaults to `primary`.
     */
    variant?: "primary" | "secondary" | "tertiary" | "link";
    /**
     * For destructive/deletion actions.
     */
    danger?: boolean;
    /**
     * If true, renders a square button intended for a single icon.
     */
    isIconButton?: boolean;
}
declare function Button({ size, variant, danger, isIconButton, ...props }: ButtonProps): react_jsx_runtime.JSX.Element;

interface ButtonGroupProps extends React.PropsWithChildren {
    orientation?: "horizontal" | "vertical";
    alignment?: "start" | "center" | "end";
    ariaLabel?: string | undefined;
}
declare function ButtonGroup({ orientation, alignment, ariaLabel, children, ...props }: ButtonGroupProps): react_jsx_runtime.JSX.Element;

interface CalloutProps extends React.PropsWithChildren {
    variant?: "lightGrey" | "lightBlue" | "lightGold" | "Blue" | "Grey" | "Black";
    title?: string;
    description?: string;
    buttons?: React.ReactNode;
    role?: React.AriaRole | undefined;
    isLeftBorderDisabled?: boolean;
}
declare function Callout({ variant, title, description, buttons, role, isLeftBorderDisabled, children, ...props }: CalloutProps): react_jsx_runtime.JSX.Element;

declare function Checkbox({ value, children, ...props }: CheckboxProps): react_jsx_runtime.JSX.Element;

interface CheckboxGroupProps extends CheckboxGroupProps$1 {
    orientation?: "horizontal" | "vertical";
    label?: string;
    description?: string;
    errorMessage?: string | ((validation: ValidationResult) => string);
    /** `flex-wrap` style property, defaults to `nowrap` */
    flexWrap?: "nowrap" | "wrap" | "wrap-reverse";
}
declare function CheckboxGroup({ orientation, label, description, errorMessage, flexWrap, children, ...props }: CheckboxGroupProps): react_jsx_runtime.JSX.Element;

interface DialogProps extends DialogProps$1 {
    isCloseable?: boolean;
}
declare function Dialog({ isCloseable, role, children, ...props }: DialogProps): react_jsx_runtime.JSX.Element;

interface FooterLinksProps {
    /**
     * Title for the list of links - associated to the list of links as a `<figcaption>`
     */
    title: string;
    /**
     * Array of link elements (`<a>` or `<Link>`)
     */
    links: React.ReactElement[];
}
/**
 * A titled list of links for use in the Footer. Rendered inside a `<figure>`
 * with the `title` prop inside of the `<figcaption>`.
 * @param {FooterLinksProps} props
 * @returns {React.ReactElement}
 */
declare function FooterLinks({ title, links }: FooterLinksProps): react_jsx_runtime.JSX.Element;
interface FooterProps {
    /**
     * Land acknowledgement block (defaults to Gov.bc.ca land acknowledgement)
     */
    acknowledgement?: React.ReactElement;
    /**
     * Logo slot (defaults to BC Gov horizontal logo)
     */
    logo?: React.ReactElement;
    /**
     * Contact information block (defaults to Gov.bc.ca contact information)
     */
    contact?: React.ReactElement;
    /**
     * Link list block (defaults to Gov.bc.ca link list).
     *
     * Pass the `<FooterLinks>` component for a styles-included list.
     */
    links?: React.ReactElement;
    /**
     * Copyright string (defaults to current year)
     */
    copyright?: string;
    /**
     * Hide the acknowledgement section
     */
    hideAcknowledgement?: boolean;
    /**
     * Hide the logo, contact information, and links section
     */
    hideLogoAndLinks?: boolean;
    /**
     * Hide the copyright string
     */
    hideCopyright?: boolean;
}
/**
 * A `<footer>` element with default content included.
 *
 * Passing `children` replaces `logo`, `contact`, and `links`.
 * @param {FooterProps} props
 * @returns {React.ReactElement}
 */
declare function Footer({ children, acknowledgement, logo, contact, links, copyright, hideAcknowledgement, hideLogoAndLinks, hideCopyright, }: React.PropsWithChildren<FooterProps>): react_jsx_runtime.JSX.Element;

declare function Form({ ...props }: FormProps): react_jsx_runtime.JSX.Element;

interface HeaderProps {
    /**
     * Link element that surrounds the logo. Use what's appropriate for your
     * router, like a `<Link>`. Defaults to a generic HTML link element like
     * `<a href="/" title="Government of British Columbia">`
     */
    logoLinkElement?: React.ReactElement;
    /**
     * Image used for the logo. Defaults to an SVG of the Government of B.C. logo.
     */
    logoImage?: JSX.Element;
    /**
     * Array of link elements that are not visible until they are focused. Used
     * for accessibility for keyboard users, to let them easily skip to main
     * content, navigation, etc.
     */
    skipLinks?: React.ReactElement[];
    /**
     * Header title text that appears to the right of the logo.
     */
    title?: string;
    /**
     * Desired element that renders the `title` string. Defaults to `<span>`.
     */
    titleElement?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "span" | "p";
}
declare function Header({ children, logoLinkElement, logoImage, skipLinks, title, titleElement, }: PropsWithChildren<HeaderProps>): react_jsx_runtime.JSX.Element;

interface HeadingProps extends HeadingProps$1 {
    color?: "primary" | "primaryInvert" | "secondary" | "secondaryInvert" | "disabled" | "danger";
    isUnstyled?: boolean;
}
declare function Heading({ color, isUnstyled, ...props }: HeadingProps): react_jsx_runtime.JSX.Element;

interface InlineAlertProps extends React.PropsWithChildren {
    variant?: "info" | "success" | "warning" | "danger";
    title?: string;
    description?: string;
    buttons?: React.ReactNode;
    isCloseable?: boolean;
    isIconHidden?: boolean;
    role?: React.AriaRole | undefined;
    onClose?: () => void;
}
declare function InlineAlert({ variant, title, description, isIconHidden, isCloseable, role, buttons, children, onClose, ...props }: InlineAlertProps): react_jsx_runtime.JSX.Element;

interface LinkProps extends LinkProps$1 {
    children?: React.ReactNode;
    size?: "small" | "medium" | "large";
    isButton?: boolean;
    buttonVariant?: "primary" | "secondary" | "tertiary";
    ariaLabel?: string | undefined;
    danger?: boolean;
    isUnstyled?: boolean;
    iconLeft?: React.ReactElement;
    iconRight?: React.ReactElement;
}
declare function Link({ children, size, danger, isButton, buttonVariant, isUnstyled, iconLeft, iconRight, ariaLabel, ...props }: LinkProps): react_jsx_runtime.JSX.Element;

declare function Modal({ children, ...props }: ModalOverlayProps): react_jsx_runtime.JSX.Element;

declare function Radio({ value, children, ...props }: RadioProps): react_jsx_runtime.JSX.Element;

interface RadioGroupProps extends RadioGroupProps$1 {
    children?: React.ReactNode;
    orientation?: "vertical" | "horizontal";
    label?: string;
    description?: string;
    errorMessage?: string | ((validation: ValidationResult) => string);
    /** `flex-wrap` style property, defaults to `nowrap` */
    flexWrap?: "nowrap" | "wrap" | "wrap-reverse";
}
declare function RadioGroup({ orientation, label, description, children, errorMessage, flexWrap, ...props }: RadioGroupProps): react_jsx_runtime.JSX.Element;

interface ListBoxItemProps extends ListBoxItemProps$1 {
    /** Text label for the option. Provide an `id` if this is not unique. */
    label: string;
    /** Descriptive text that appears below the option's label */
    description?: string;
    /** Marks an option visually with red text to indicate a destructive/dangerous option */
    isDestructive?: boolean;
    /** Left icon slot */
    iconLeft?: React.ReactElement;
    /** Right icon slot */
    iconRight?: React.ReactElement;
}
interface SelectionSectionProps {
    id: Key;
    /** Label for the section */
    header?: string;
    /** Flat list of options within the section */
    items: ListBoxItemProps[];
}
interface SelectProps<T extends object> extends SelectProps$1<T> {
    /** Use `items` for a flat list of options */
    items?: ListBoxItemProps[];
    /** Use `sections` for a sectioned list with `items` options in each section */
    sections?: SelectionSectionProps[];
    /** Text label for the Select component */
    label?: string;
    /** Temporary text that occupies the select input when no option has been selected. */
    placeholder?: string;
    /** Defaults to `medium` */
    size?: "small" | "medium";
    /** Description or helper text that renders below the select input */
    description?: string;
    /** Used for data validation and error handling */
    errorMessage?: string | ((validation: ValidationResult) => string);
}
/** Select displays a collapsible list of options and allows a user to select one of them. */
declare function Select<T extends object>({ items, sections, label, description, placeholder, size, errorMessage, ...props }: SelectProps<T>): react_jsx_runtime.JSX.Element;

declare function SvgBcLogo({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgBcOutlineIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgBetaIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgCheckIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgCheckCircleIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgDashIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgExclamationIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgExclamationCircleIcon({ id, }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgChevronUpIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgChevronDownIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgCloseIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgInfoIcon({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

declare function SvgTooltipArrowUp({ id }: {
    id?: string | undefined;
}): react_jsx_runtime.JSX.Element;

interface TagProps extends TagProps$1 {
    /**
     * Icon that appears to the left of the `textValue` field
     */
    icon?: React.ReactNode;
    /**
     * Background color
     */
    color?: "bc-blue" | "bc-gold" | "blue" | "dark" | "gray" | "grey" | "green" | "red" | "yellow";
    /**
     * tagStyle
     */
    tagStyle?: "rectangular" | "circular";
    /**
     * size
     */
    size?: "small" | "medium";
}
declare function Tag({ color, tagStyle, size, icon, id, textValue, }: TagProps): react_jsx_runtime.JSX.Element;

interface TagGroupProps extends TagGroupProps$1 {
    /**
     * Labels the TagGroup, appears above the tags.
     */
    label?: string;
    /**
     * Extended description of the TagGroup, appears below the tags.
     */
    description?: string;
    /**
     * Error message, appears below the tags and below the optional description.
     */
    errorMessage?: string;
}
declare function TagGroup({ children, label, description, errorMessage, ...props }: TagGroupProps): react_jsx_runtime.JSX.Element;

interface TagListProps<T> extends Pick<TagListProps$1<T>, "children" | "renderEmptyState"> {
    items: TagProps[];
    /**
     * Used to set the `flex-direction` on the TagList.
     */
    orientation?: "horizontal" | "vertical";
}
declare function TagList<T extends object>({ items, orientation, renderEmptyState, ...props }: TagListProps<T>): react_jsx_runtime.JSX.Element;

interface TextProps extends TextProps$1 {
    size?: "small" | "medium" | "large";
    color?: "primary" | "primaryInvert" | "secondary" | "secondaryInvert" | "disabled" | "danger";
    isUnstyled?: boolean;
}
declare function Text({ elementType, size, color, isUnstyled, ...props }: TextProps): react_jsx_runtime.JSX.Element;

interface TextAreaProps extends TextFieldProps$1 {
    label?: string;
    description?: string;
    errorMessage?: string | ((validation: ValidationResult) => string);
}
declare function TextArea({ label, description, errorMessage, maxLength, onChange, value, ...props }: TextAreaProps): react_jsx_runtime.JSX.Element;

interface TextFieldProps extends TextFieldProps$1 {
    size?: "medium" | "small";
    label?: string;
    description?: string;
    errorMessage?: string | ((validation: ValidationResult) => string);
    iconLeft?: React.ReactElement;
    iconRight?: React.ReactElement;
}
declare function TextField({ size, label, description, errorMessage, iconLeft, iconRight, ...props }: TextFieldProps): react_jsx_runtime.JSX.Element;

interface SwitchProps extends SwitchProps$1 {
    labelPosition?: "left" | "right";
}
declare function Switch({ labelPosition, children, ...props }: SwitchProps): react_jsx_runtime.JSX.Element;

declare function Tooltip(props: TooltipProps): react_jsx_runtime.JSX.Element;

export { Accordion, AccordionGroup, AlertBanner, AlertDialog, Button, ButtonGroup, Callout, Checkbox, CheckboxGroup, Dialog, Footer, FooterLinks, Form, Header, Heading, InlineAlert, Link, Modal, Radio, RadioGroup, Select, SvgBcLogo, SvgBcOutlineIcon, SvgBetaIcon, SvgCheckCircleIcon, SvgCheckIcon, SvgChevronDownIcon, SvgChevronUpIcon, SvgCloseIcon, SvgDashIcon, SvgExclamationCircleIcon, SvgExclamationIcon, SvgInfoIcon, SvgTooltipArrowUp, Switch, Tag, TagGroup, TagList, Text, TextArea, TextField, Tooltip };
